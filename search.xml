<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[LCD12864串口驱动udev]]></title>
      <url>http://yoursite.com/2017/01/22/12864-udev-char-device/</url>
      <content type="html"><![CDATA[<h2 id="1、LCD12864串口驱动程序"><a href="#1、LCD12864串口驱动程序" class="headerlink" title="1、LCD12864串口驱动程序"></a>1、LCD12864串口驱动程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;linux/module.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/kernel.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/types.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/sched.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/init.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/fs.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/ioctl.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/delay.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/bcd.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/capability.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/rtc.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/cdev.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/device.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/gpio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/version.h&gt;</span></div><div class="line"></div><div class="line"><span class="comment">#include &lt;../arch/arm/mach-mx28/mx28_pins.h&gt;</span></div><div class="line"></div><div class="line"><span class="comment">#define DEVICE_NAME "LCD12864"</span></div><div class="line"></div><div class="line"><span class="comment">#define LCD_SID 57</span></div><div class="line"><span class="comment">#define LCD_CS 39</span></div><div class="line"><span class="comment">#define LCD_CLK 56</span></div><div class="line"></div><div class="line"><span class="comment">#define LCD_IOC_MAGIC 'L'</span></div><div class="line"><span class="comment">#define LCD_CMD _IO(LCD_IOC_MAGIC,0)</span></div><div class="line"><span class="comment">#define LCD_LINE _IO(LCD_IOC_MAGIC,1)</span></div><div class="line"><span class="comment">#define LCD_ROW _IO(LCD_IOC_MAGIC,2)</span></div><div class="line"><span class="comment">#define LCD_DATA _IO(LCD_IOC_MAGIC,3)</span></div><div class="line"></div><div class="line"><span class="comment">#define LCD_IOCTL_MAXNR 4</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#define LCD_SID_H gpio_direction_output(LCD_SID,1);</span></div><div class="line"><span class="comment">#define LCD_SID_L gpio_direction_output(LCD_SID,0);</span></div><div class="line"><span class="comment">#define LCD_CS_H gpio_direction_output(LCD_CS,1);</span></div><div class="line"><span class="comment">#define LCD_CS_L gpio_direction_output(LCD_CS,0);</span></div><div class="line"><span class="comment">#define LCD_CLK_H gpio_direction_output(LCD_CLK,1);</span></div><div class="line"><span class="comment">#define LCD_CLK_L gpio_direction_output(LCD_CLK,0);</span></div><div class="line"></div><div class="line">static int major,minor;</div><div class="line">struct cdev *lcd;</div><div class="line">static dev_t devno;</div><div class="line">static struct class *lcd_class;</div><div class="line">static int lcd_open(struct inode *inode,struct file *filp);</div><div class="line">static int lcd_release(struct inode *inode,struct file *filp);</div><div class="line">static int lcd_ioctl(struct inode *inode,struct file *flip,unsigned int <span class="built_in">command</span>,unsigned long arg);</div><div class="line">static int lcd_init(void);</div><div class="line">static void lcd_exit(void);</div><div class="line"></div><div class="line">struct file_operations lcd_fops =&#123;</div><div class="line">	.owner = THIS_MODULE,</div><div class="line">	.open =lcd_open,</div><div class="line">	.release = lcd_release,</div><div class="line"><span class="comment">#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,6,36)</span></div><div class="line">	.unlocked_ioctl = lcd_ioctl,</div><div class="line"><span class="comment">#else</span></div><div class="line">	.ioctl = lcd_ioctl</div><div class="line"><span class="comment">#endif</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">static void lcd_sendbyte(unsigned char byte)</div><div class="line">&#123;</div><div class="line">	unsigned int i=0;</div><div class="line">	<span class="keyword">for</span>(i=0;i&lt;8;i++)</div><div class="line">	&#123;</div><div class="line">		LCD_CLK_L;</div><div class="line">		udelay(1);</div><div class="line">		<span class="keyword">if</span>(byte &amp; 0x80)</div><div class="line">		&#123;LCD_SID_H;&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;LCD_SID_L;&#125;</div><div class="line">		LCD_CLK_H;</div><div class="line">		udelay(1);</div><div class="line">		LCD_CLK_L;</div><div class="line">		udelay(1);</div><div class="line">		byte = byte &lt;&lt; 1;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void lcd12864_write_cmd(unsigned char cmd)</div><div class="line">&#123;</div><div class="line">	LCD_CS_H;</div><div class="line">	lcd_sendbyte(0xf8);</div><div class="line">	lcd_sendbyte(0xf0 &amp; cmd);</div><div class="line">	lcd_sendbyte(0xf0 &amp; (cmd &lt;&lt; 4));</div><div class="line">	LCD_CS_L;</div><div class="line">	mdelay(10);</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void lcd12864_write_dat(unsigned char dat)</div><div class="line">&#123;</div><div class="line">	</div><div class="line">	LCD_CS_H;</div><div class="line">	lcd_sendbyte(0xfa);</div><div class="line">	lcd_sendbyte(0xf0 &amp; dat);</div><div class="line">	lcd_sendbyte(0xf0 &amp; (dat &lt;&lt; 4));</div><div class="line">	LCD_CS_L;</div><div class="line">	mdelay(10);</div><div class="line">&#125;</div><div class="line">static void lcd12864_init(void)</div><div class="line">&#123;</div><div class="line">	lcd12864_write_cmd(0x30);</div><div class="line">	lcd12864_write_cmd(0x02);</div><div class="line">	lcd12864_write_cmd(0x06);</div><div class="line">	lcd12864_write_cmd(0x0c);</div><div class="line">	lcd12864_write_cmd(0x01);</div><div class="line">	lcd12864_write_cmd(0x80);</div><div class="line"></div><div class="line">&#125;</div><div class="line">static void lcd12864_clean(void)</div><div class="line">&#123;</div><div class="line">	lcd12864_write_cmd(0x01);</div><div class="line">&#125;</div><div class="line">static void lcd_string(unsigned char x,unsigned char y,unsigned char *String)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>((x &lt; 8)&amp;&amp;(y &lt; 4))</div><div class="line">	&#123;</div><div class="line">		switch(y)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">case</span> 0:</div><div class="line">				lcd12864_write_cmd(0x80|0x00|x);</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="keyword">case</span> 1:</div><div class="line">				lcd12864_write_cmd(0x80|0x10|x);</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="keyword">case</span> 2:</div><div class="line">				lcd12864_write_cmd(0x80|0x08|x);</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">			<span class="keyword">case</span> 3:</div><div class="line">				lcd12864_write_cmd(0x80|0x18|x);</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span>(*String !=<span class="string">'\0'</span>)</div><div class="line">		&#123;</div><div class="line">			lcd12864_write_dat(*String);</div><div class="line">			mdelay(50);</div><div class="line">			String++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;	</div><div class="line">static int lcd_open(struct inode *inode,struct file *file)</div><div class="line">&#123;</div><div class="line">	try_module_get(THIS_MODULE);</div><div class="line">	lcd12864_init();//init lcd12864 cmd </div><div class="line">	//init lcd12864 background</div><div class="line">	lcd_string(0,0,<span class="string">"Linux Chardev"</span>);</div><div class="line">	lcd_string(0,1,<span class="string">"LCD12864 Device"</span>);</div><div class="line">	lcd_string(0,2,<span class="string">"Initialization"</span>);</div><div class="line">	lcd_string(0,3,<span class="string">"Author:Jason"</span>);</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div><div class="line">static int lcd_release(struct inode *inode,struct file *file)</div><div class="line">&#123;</div><div class="line">	module_put(THIS_MODULE);</div><div class="line">	lcd12864_clean();//close lcd12864 background</div><div class="line">	lcd_string(0,0,<span class="string">"LCD12864 Device"</span>);</div><div class="line">	lcd_string(0,1,<span class="string">"Already"</span>);</div><div class="line">	lcd_string(0,2,<span class="string">"Closed"</span>);</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,6,36)</span></div><div class="line">int lcd_ioctl(struct file *filp,unsigned int cmd,unsigned long arg)</div><div class="line"><span class="comment">#else</span></div><div class="line">static int lcd_ioctl(struct inode *inode,struct file *file,unsigned int cmd,unsigned long arg)</div><div class="line"><span class="comment">#endif</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(_IOC_TYPE(cmd) != LCD_IOC_MAGIC)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">return</span> -ENOTTY;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(_IOC_NR(cmd) &gt; LCD_IOCTL_MAXNR)</div><div class="line">	&#123;</div><div class="line">		<span class="built_in">return</span> -ENOTTY;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	switch(cmd)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">case</span> LCD_LINE:  //待开发</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">		<span class="keyword">case</span> LCD_ROW:   //待开发</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">		<span class="keyword">case</span> LCD_CMD:   //待开发</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">		<span class="keyword">case</span> LCD_DATA:  //待开发</div><div class="line">				<span class="built_in">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line"></div><div class="line">			</div><div class="line">&#125;</div><div class="line">static int __init lcd_init(void)</div><div class="line">&#123;</div><div class="line">	int ret=0;</div><div class="line"></div><div class="line">	gpio_free(LCD_SID);</div><div class="line">	gpio_free(LCD_CS);</div><div class="line">	gpio_free(LCD_CLK);</div><div class="line">	ret += gpio_request(LCD_SID,<span class="string">"SID"</span>);</div><div class="line">	ret += gpio_request(LCD_CS,<span class="string">"CS"</span>);</div><div class="line">	ret += gpio_request(LCD_CLK,<span class="string">"CLK"</span>);</div><div class="line">	<span class="keyword">if</span>(ret)</div><div class="line">	&#123;</div><div class="line">		printk(<span class="string">"request gpio failed "</span>);</div><div class="line">		<span class="built_in">return</span> -1;</div><div class="line">	&#125;</div><div class="line">	ret = 0;</div><div class="line">	ret = alloc_chrdev_region(&amp;devno,minor,1,<span class="string">"LCD12864"</span>);</div><div class="line">	major = MAJOR(devno);</div><div class="line">	<span class="keyword">if</span>(ret &lt; 0)</div><div class="line">	&#123;</div><div class="line">		printk(KERN_ERR<span class="string">"cannot get major %d\n"</span>,major);</div><div class="line">		<span class="built_in">return</span> -1;</div><div class="line">	&#125;</div><div class="line">	lcd = cdev_alloc();</div><div class="line">	<span class="keyword">if</span>(lcd !=NULL)</div><div class="line">	&#123;</div><div class="line">		cdev_init(lcd,&amp;lcd_fops);</div><div class="line">		lcd-&gt;owner = THIS_MODULE;</div><div class="line">		<span class="keyword">if</span>(cdev_add(lcd,devno,1) != 0)</div><div class="line">		&#123;</div><div class="line">			printk(KERN_ERR<span class="string">"add cdev error! \n"</span>);</div><div class="line">			goto error;</div><div class="line">		&#125;</div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		printk(KERN_ERR<span class="string">"cdev_alloc error! \n"</span>);</div><div class="line">		<span class="built_in">return</span> -1;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	lcd_class = class_create(THIS_MODULE,<span class="string">"lcd_class"</span>);</div><div class="line">	<span class="keyword">if</span>(IS_ERR(lcd_class))</div><div class="line">	&#123;</div><div class="line">		printk(KERN_INFO<span class="string">"create class error!\n"</span>);</div><div class="line">		<span class="built_in">return</span> -1;</div><div class="line">	&#125;</div><div class="line">	device_create(lcd_class,NULL,devno,NULL,<span class="string">"lcd12864"</span>);</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">error:</div><div class="line">	unregister_chrdev_region(devno,1);</div><div class="line">	<span class="built_in">return</span> ret;</div><div class="line">	</div><div class="line">&#125;</div><div class="line">static void __exit lcd_exit(void)</div><div class="line">&#123;</div><div class="line">	cdev_del(lcd);</div><div class="line">	unregister_chrdev_region(devno,1);</div><div class="line">	device_destroy(lcd_class,devno);</div><div class="line">	class_destroy(lcd_class);</div><div class="line">&#125;</div><div class="line"></div><div class="line">module_init(lcd_init);</div><div class="line">module_exit(lcd_exit);</div><div class="line"></div><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"ideask,ideask@ideask.cf"</span>);</div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line"><span class="comment">## 2、Makefile</span></div><div class="line">``` bash</div><div class="line">CC = arm-fsl-linux-gnueabi-gcc</div><div class="line"></div><div class="line">ifneq ($(KERNELRELEASE),)</div><div class="line">obj-m := lcd.o</div><div class="line"><span class="keyword">else</span></div><div class="line">PWD :=$(shell <span class="built_in">pwd</span>)</div><div class="line">KVER :=$(shell uname -r)</div><div class="line">KDIR :=/root/linux-2.6.35.3</div><div class="line"></div><div class="line">all:</div><div class="line">	$(MAKE) -C $(KDIR) M=$(PWD) modules</div><div class="line">clean:</div><div class="line">	rm -rf .*.cmd *.o *.mod.c *.ko .tmp_versions</div><div class="line">endif</div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line"><span class="comment">## 3、测试程序</span></div><div class="line">``` bash</div><div class="line"><span class="comment">#include &lt;stdio.h&gt;</span></div><div class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></div><div class="line"><span class="comment">#include &lt;unistd.h&gt;</span></div><div class="line"><span class="comment">#include &lt;sys/ioctl.h&gt;</span></div><div class="line"><span class="comment">#include &lt;errno.h&gt;</span></div><div class="line"><span class="comment">#include &lt;fcntl.h&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#define DEV_NAME "/dev/lcd12864"</span></div><div class="line"></div><div class="line">int main(int argc, char *argv[])</div><div class="line">&#123;</div><div class="line">	int i;</div><div class="line">	int fd = 0;</div><div class="line">	fd = open(DEV_NAME,O_RDONLY);</div><div class="line">	<span class="keyword">if</span>(fd &lt; 0)</div><div class="line">	&#123;</div><div class="line">		perror(<span class="string">"Open "</span>DEV_NAME<span class="string">"Failed!\n"</span>);</div><div class="line">		<span class="built_in">return</span> -1;</div><div class="line">	&#125;</div><div class="line">	//close(fd);</div><div class="line">	<span class="keyword">while</span>(1);</div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ioctl方式操作LED udev驱动模板]]></title>
      <url>http://yoursite.com/2017/01/22/ioctl-led-udev-char-device/</url>
      <content type="html"><![CDATA[<h2 id="1、驱动源码"><a href="#1、驱动源码" class="headerlink" title="1、驱动源码"></a>1、驱动源码</h2><pre><code class="bash"><span class="comment">#include &lt;linux/init.h&gt;</span>
<span class="comment">#include &lt;linux/module.h&gt;</span>
<span class="comment">#include &lt;linux/fs.h&gt;</span>
<span class="comment">#include &lt;linux/cdev.h&gt;</span>
<span class="comment">#include &lt;linux/device.h&gt;</span>
<span class="comment">#include &lt;linux/version.h&gt;</span>

<span class="comment">#include &lt;asm/mach/arch.h&gt;</span>
<span class="comment">#include &lt;asm/gpio.h&gt;</span>

<span class="comment">#define LED_IOC_MAGIC 'L'    //操作LED的幻数</span>
<span class="comment">#define LED_ON _IO(LED_IOC_MAGIC,0)    //无参数命令</span>
<span class="comment">#define LED_OFF _IO(LED_IOC_MAGIC,1) </span>
<span class="comment">#define LED_IOCTL_MAXNR 2    //</span>

static int major,minor;
struct cdev *led;
static dev_t devno;
static struct class *led_class;

<span class="comment">#define DEVICE_NAME "led" </span>
<span class="comment">#define GPIO_LED_PIN_NUM 116</span>

static int led_open(struct inode *inode,struct file *file)
{
    try_module_get(THIS_MODULE);
    gpio_direction_output(GPIO_LED_PIN_NUM,1);
    <span class="built_in">return</span> 0;
}

static int led_release(struct inode *inode,struct file *file)
{
    module_put(THIS_MODULE);
    gpio_direction_output(GPIO_LED_PIN_NUM,1);
    <span class="built_in">return</span> 0;
}
<span class="comment">#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,6,36)</span>
int led_ioctl(struct file *filp,unsigned int cmd,unsigned long arg)
<span class="comment">#else</span>
static int led_ioctl(struct inode *inode,struct file *file,unsigned int cmd,unsigned long arg)
<span class="comment">#endif</span>
{
    <span class="keyword">if</span>(_IOC_TYPE(cmd) != LED_IOC_MAGIC)
    {
        <span class="built_in">return</span> -ENOTTY;
    }
    <span class="keyword">if</span>(_IOC_NR(cmd) &gt; LED_IOCTL_MAXNR)
    {
        <span class="built_in">return</span> -ENOTTY;
    }
    switch(cmd)
    {
        <span class="keyword">case</span> LED_ON:
            gpio_set_value(GPIO_LED_PIN_NUM,0);
            <span class="built_in">break</span>;
        <span class="keyword">case</span> LED_OFF:
            gpio_set_value(GPIO_LED_PIN_NUM,1);
            <span class="built_in">break</span>;
        default:
            gpio_set_value(GPIO_LED_PIN_NUM,0);
            <span class="built_in">break</span>;
    }
    <span class="built_in">return</span> 0;
}

struct file_operations led_fops ={
    .owner = THIS_MODULE,
    .open = led_open,
    .release = led_release,
<span class="comment">#if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,6,36)</span>
    .unlocked_ioctl = led_ioctl
<span class="comment">#else</span>
    .ioctl = led_ioctl
<span class="comment">#endif</span>
};
static int __init led_init(void)
{
    int ret;
    gpio_free(GPIO_LED_PIN_NUM);
    <span class="keyword">if</span>(gpio_request(GPIO_LED_PIN_NUM,<span class="string">"led_run"</span>))
    {
        printk(<span class="string">"request %s gpio faile \n"</span>,<span class="string">"led_run"</span>);
        <span class="built_in">return</span> -1;
    }
    ret = alloc_chrdev_region(&amp;devno,minor,1,<span class="string">"led"</span>);
    major = MAJOR(devno);
    <span class="keyword">if</span>(ret &lt; 0)
    {
        printk(KERN_ERR<span class="string">"cannot get major %d \n"</span>,major);
        <span class="built_in">return</span> -1;
    }

    led = cdev_alloc();
    <span class="keyword">if</span>(led != NULL)
    {
        cdev_init(led,&amp;led_fops);
        led-&gt;owner = THIS_MODULE;
        <span class="keyword">if</span>(cdev_add(led,devno,1) != 0)
        {
            printk(KERN_ERR <span class="string">"add cdev error!\n"</span>);
            goto error;
        }
    }
    <span class="keyword">else</span>
    {
        printk(KERN_ERR<span class="string">"cdev_alloc error!\n"</span>);
        <span class="built_in">return</span> -1;
    }

    led_class = class_create(THIS_MODULE,<span class="string">"led_class"</span>);
     <span class="keyword">if</span>(IS_ERR(led_class))
    {
        printk(KERN_INFO<span class="string">"create class error\n"</span>);
        <span class="built_in">return</span> -1;
    }

    device_create(led_class,NULL,devno,NULL,<span class="string">"led"</span>);
    <span class="built_in">return</span> 0;

error:
        unregister_chrdev_region(devno,1);
        <span class="built_in">return</span> ret;
}

static void __exit led_exit(void)
{
    cdev_del(led);
    unregister_chrdev_region(devno,1);
    device_destroy(led_class,devno);
    class_destroy(led_class);
}

module_init(led_init);
module_exit(led_exit);

MODULE_LICENSE(<span class="string">"GPL"</span>);
MODULE_AUTHOR(<span class="string">"ideask,ideask@ideask.cf"</span>);
</code></pre>
<h2 id="2、编译Makefile"><a href="#2、编译Makefile" class="headerlink" title="2、编译Makefile"></a>2、编译Makefile</h2><pre><code class="bash">CC = arm-fsl-linux-gnueabi-gcc

ifneq ($(KERNELRELEASE),)
obj-m := led.o
<span class="keyword">else</span>
PWD :=$(shell <span class="built_in">pwd</span>)
KVER :=$(shell uname -r)
KDIR :=/root/linux-2.6.35.3  <span class="comment">#内核文件地址，自定义</span>

all:
    $(MAKE) -C $(KDIR) M=$(PWD) modules
clean:
    rm -rf .*.cmd *.o *.mod.c *.ko .tmp_versions
endif
</code></pre>
<h2 id="3、测试程序"><a href="#3、测试程序" class="headerlink" title="3、测试程序"></a>3、测试程序</h2><pre><code class="bash"><span class="comment">#include &lt;stdio.h&gt;</span>
<span class="comment">#include &lt;stdlib.h&gt;</span>
<span class="comment">#include &lt;unistd.h&gt;</span>
<span class="comment">#include &lt;sys/ioctl.h&gt;</span>
<span class="comment">#include &lt;errno.h&gt;</span>
<span class="comment">#include &lt;fcntl.h&gt;</span>

<span class="comment">#define LED_IOC_MAGIC 'L'    //操作LED的幻数</span>
<span class="comment">#define LED_ON _IO(LED_IOC_MAGIC,0)    //无参数命令</span>
<span class="comment">#define LED_OFF _IO(LED_IOC_MAGIC,1)</span>

<span class="comment">#define DEV_NAME "/dev/led"</span>

int main(int argc, char *argv[])
{
    int i;
    int fd = 0;
    fd = open(DEV_NAME,O_RDONLY);
    <span class="keyword">if</span>(fd &lt; 0)
    {
        perror(<span class="string">"Open "</span>DEV_NAME<span class="string">"Failed!\n"</span>);
        <span class="built_in">return</span> -1;
    }
    <span class="keyword">while</span>(1)
    {
        ioctl(fd,LED_ON);
        //sleep(1);
        ioctl(fd,LED_OFF);
        //sleep(1);
    }
    close(fd);
    <span class="built_in">return</span> 0;
}
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[udev字符设备的程序]]></title>
      <url>http://yoursite.com/2017/01/22/udev-char-device/</url>
      <content type="html"><![CDATA[<h2 id="支持udev的空壳程序"><a href="#支持udev的空壳程序" class="headerlink" title="支持udev的空壳程序"></a>支持udev的空壳程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;linux/init.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/module.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/fs.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/cdev.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/device.h&gt;</span></div><div class="line"></div><div class="line"> static int major = 232; /* 静态设备号方式的默认值 */</div><div class="line"> static int minor = 0; /* 静态设备号方式的默认值 */</div><div class="line"> module_param(major, int, S_IRUGO);</div><div class="line"> module_param(minor, int, S_IRUGO);</div><div class="line"></div><div class="line"> struct cdev *char_null_udev; /* cdev 数据结构 */</div><div class="line"> static dev_t devno; /* 设备编号 */</div><div class="line"> static struct class *char_null_udev_class;</div><div class="line"></div><div class="line"> <span class="comment">#define DEVICE_NAME "char_null_udev"</span></div><div class="line"></div><div class="line"> static int __init char_null_udev_init(void)</div><div class="line"> &#123;</div><div class="line">	 int ret;</div><div class="line"></div><div class="line">	 <span class="keyword">if</span> (major &gt; 0) </div><div class="line">	 &#123; /* 静态设备号 */</div><div class="line">		devno = MKDEV(major, minor);</div><div class="line">		ret=register_chrdev_region(devno,1,<span class="string">"char_null_udev"</span>);</div><div class="line">	 &#125; </div><div class="line">	 <span class="keyword">else</span> </div><div class="line">	 &#123; /* 动态设备号 */</div><div class="line">		ret=alloc_chrdev_region(&amp;devno,minor,1,<span class="string">"char_null_udev"</span>); /* 从系统获取主设备号 */</div><div class="line">		major = MAJOR(devno);</div><div class="line">	 &#125;</div><div class="line">	 <span class="keyword">if</span> (ret &lt; 0)</div><div class="line">	 &#123;</div><div class="line">		printk(KERN_ERR <span class="string">"cannot get major %d \n"</span>, major);</div><div class="line">		<span class="built_in">return</span> -1;</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">	 char_null_udev = cdev_alloc(); /* 分配 char_null_udev 结构 */</div><div class="line">	 <span class="keyword">if</span> (char_null_udev != NULL) </div><div class="line">	 &#123;</div><div class="line">		 cdev_init(char_null_udev, &amp;major); /* 初始化 char_null_udev 结构 */</div><div class="line">		 char_null_udev-&gt;owner = THIS_MODULE;</div><div class="line">		<span class="keyword">if</span> (cdev_add(char_null_udev, devno, 1) != 0) </div><div class="line">		&#123; /* 增加 char_null_udev 到系统中 */</div><div class="line">			printk(KERN_ERR <span class="string">"add cdev error!\n"</span>);</div><div class="line">			goto error;</div><div class="line">		&#125;</div><div class="line">	 &#125; </div><div class="line">	 <span class="keyword">else</span> &#123;</div><div class="line">		printk(KERN_ERR <span class="string">"cdev_alloc error!\n"</span>);</div><div class="line">		<span class="built_in">return</span> -1;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	//在/sys/class/下创建 char_null_udev_class 目录</div><div class="line">	char_null_udev_class = class_create(THIS_MODULE, <span class="string">"char_null_udev_class"</span>);</div><div class="line">	<span class="keyword">if</span> (IS_ERR(char_null_udev_class)) </div><div class="line">	&#123;</div><div class="line">		printk(KERN_INFO <span class="string">"create class error\n"</span>);</div><div class="line">		<span class="built_in">return</span> -1;</div><div class="line">	&#125;</div><div class="line">	/* 将创建/dev/char_null_udev0 文件 */</div><div class="line">	//device_create(char_null_udev_class, NULL, devno, NULL, <span class="string">"char_null_udev"</span> <span class="string">"%d"</span>,MINOR(devno));</div><div class="line">	/* 将创建/dev/char_null_udev 文件 */</div><div class="line">	device_create(char_null_udev_class, NULL, devno, NULL, <span class="string">"char_null_udev"</span>);</div><div class="line"></div><div class="line">	<span class="built_in">return</span> 0;</div><div class="line"></div><div class="line">	error:</div><div class="line">		unregister_chrdev_region(devno, 1); /* 释放已经获得的设备号 */</div><div class="line">	<span class="built_in">return</span> ret;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> static void __exit char_null_udev_exit(void)</div><div class="line"> &#123;</div><div class="line">	device_destroy(char_null_udev_class, devno);</div><div class="line">	class_destroy(char_null_udev_class);</div><div class="line">	cdev_del(char_null_udev); /* 移除字符设备 */</div><div class="line">	unregister_chrdev_region(devno, 1); /* 释放设备号 */</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> module_init(char_null_udev_init);</div><div class="line"> module_exit(char_null_udev_exit);</div><div class="line"></div><div class="line"> MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line"> MODULE_AUTHOR(<span class="string">"Jason"</span>);</div></pre></td></tr></table></figure>
<h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析:"></a>程序分析:</h2><p> 第(1)~(5)行是所需要的头文件；<br> 第(7)~(8)行用变量设定设备的主次设备号；<br> 第(9)~(10)行是模块参数，驱动支持加载的时候指定主次设备号；<br> 第(12)行定义一个 cdev 全局变量 char_null_udev；<br> 第(13)行的 dev_t devno 用来保存设备编号；<br> 第(14)行是定义 class 结构；<br> 第(16)行定义设备名为 char_null_udev；<br> 第(18)~(71)是模块的初始化代码，行完成设备注册以及设备节点创建：<br> 第(22)~(31)行，根据 major 变量，可以静态或者动态获取设备编号：如果是设<br>备号，需要用 MKDEV 构建成设备编号（行(24)）； 如果是动态获取设备编号，<br>还需在(29)行获取主设备号；<br> 第(38)行通过 cdev_alloc 分配一个 cdev 数据结构 char_null_udev；<br> 如果分配成功，则在(41)~(42)行进行初始化；注意 cdev_init()的第 2 个参数，<br>本应该传入驱动操作方法 fops 的地址，但是没有实现 fops，就传入一个有效<br>地址，防止运行错误；<br> 第(43)行通过 cdev_add 将 char_null_udev 添加到系统中，如果添加失败，则需<br>要释放已经获取的设备号并退出；<br> 第(55)行在 sysfs 的 class 目录下创建 char_null_udev_class 目录；<br> 第(62)或(64)行是在 sysfs 系统中创建设备节点；<br> 第(73)~(79)是模块的退出代码，完成资源释放工作：<br> 第(75)行删除 char_null_uedv 结构；<br> 第(78)行释放设备号；<br> 第(77)行删除 sysfs 中的设备节点；<br> 第(76)行销毁 sysfs 中的 class。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单的字符设备驱动指南]]></title>
      <url>http://yoursite.com/2017/01/22/char-device/</url>
      <content type="html"><![CDATA[<h2 id="1、头文件"><a href="#1、头文件" class="headerlink" title="1、头文件"></a>1、头文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;linux/module.h&gt;  </span></div><div class="line"><span class="comment">#include &lt;linux/init.h&gt;是必不可少的。</span></div></pre></td></tr></table></figure>
<h2 id="2、模块初始化函数"><a href="#2、模块初始化函数" class="headerlink" title="2、模块初始化函数"></a>2、模块初始化函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">static int __init module_init_func(void)</div><div class="line">&#123;</div><div class="line">初始化代码</div><div class="line">&#125;</div><div class="line">module_init(module_init_func);</div></pre></td></tr></table></figure>
<h2 id="3、模块退出函数"><a href="#3、模块退出函数" class="headerlink" title="3、模块退出函数"></a>3、模块退出函数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">static void __exit module_exit_func(void)</div><div class="line">&#123;</div><div class="line">模块退出代码</div><div class="line">&#125;</div><div class="line">module_exit(module_exit_func);</div></pre></td></tr></table></figure>
<h2 id="4、许可证"><a href="#4、许可证" class="headerlink" title="4、许可证"></a>4、许可证</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</div><div class="line">MODULE_AUTHOR(<span class="string">"Jason_lin &lt;Linux@ideask.cf&gt;"</span>);</div><div class="line">MODULE_DESCRIPTION(<span class="string">"beep Driver"</span>);</div><div class="line">MODULE_VERSION(<span class="string">"V1.00"</span>);</div></pre></td></tr></table></figure>
<h2 id="5、printk语句"><a href="#5、printk语句" class="headerlink" title="5、printk语句"></a>5、printk语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#define KERN_EMERG "&lt;0&gt;" /* system is unusable */</span></div><div class="line"><span class="comment">#define KERN_ALERT "&lt;1&gt;" /* action must be taken immediately */</span></div><div class="line"><span class="comment">#define KERN_CRIT "&lt;2&gt;" /* critical conditions */</span></div><div class="line"><span class="comment">#define KERN_ERR "&lt;3&gt;" /* error conditions */</span></div><div class="line"><span class="comment">#define KERN_WARNING "&lt;4&gt;" /* warning conditions */</span></div><div class="line"><span class="comment">#define KERN_NOTICE "&lt;5&gt;" /* normal but significant condition */</span></div><div class="line"><span class="comment">#define KERN_INFO "&lt;6&gt;" /* informational */</span></div><div class="line"><span class="comment">#define KERN_DEBUG "&lt;7&gt;" /* debug-level messages */</span></div></pre></td></tr></table></figure>
<h2 id="6、Simple-demon"><a href="#6、Simple-demon" class="headerlink" title="6、Simple demon"></a>6、Simple demon</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;linux/module.h&gt;</span></div><div class="line"><span class="comment">#include &lt;linux/init.h&gt;</span></div><div class="line"></div><div class="line"> static int num = 3;</div><div class="line"> static char *whom = <span class="string">"master"</span>;</div><div class="line"></div><div class="line"> module_param(num, int, S_IRUGO);</div><div class="line"> module_param(whom, charp, S_IRUGO);</div><div class="line"></div><div class="line"> static int __init hello_init(void)</div><div class="line"> &#123;</div><div class="line">  printk(KERN_INFO <span class="string">"%s, I get %d\n"</span>, whom, num);</div><div class="line">  <span class="built_in">return</span> 0;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> static void __exit hello_exit(void)</div><div class="line"> &#123;</div><div class="line">  printk(<span class="string">"I'll be leaving, bye!\n"</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> module_init(hello_init);</div><div class="line"> module_exit(hello_exit);</div><div class="line"></div><div class="line"> MODULE_LICENSE(<span class="string">"GPL"</span>);</div></pre></td></tr></table></figure>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre><code class="bash"><span class="comment"># insmod hellop.ko whom="MASTER" num=5</span>
</code></pre>
<p>MASTER, I get 5</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IDEASK team building]]></title>
      <url>http://yoursite.com/2017/01/21/IDEASK-team-building/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2017/01/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
